$('.user-form').on('submit',function(event){$('.string-input').each(function(){/*Check our input (are they empty)*/if($(this).val()==''){$(this).addClass('bg');//make our input red
let parent=$(this).closest('li');event.preventDefault();/*Add warning block*/parent.append(`<div class="warning"> 
                      <p>You enter wrong value</p>
                      <div class="registration-arrow"></div>
                      </div>`);}else{$(this).removeClass('bg');//if everything ok,delete red background in input
$(this).closest('li').children('.warning').remove();}});if($('#male').prop('checked')==true&&$('#female').prop('checked')==true){/*Check if user choose two variants*/let genderParent=$('#male').parent();genderParent.append(`<div class="gender-warning"> 
                      <p>You enter wrong gender value</p>
                      <div class="registration-arrow"></div>
                      </div>`);event.preventDefault();}});$('#UserpasswordAgain').on('blur',function(){/*Check if our passwords are not the same*/if($(this).val()!=$('#Userpassword').val()){let parent=$(this).parent();parent.append(`<div class="warning"> 
                      <p>Passwords are not the same</p>
                      <div class="registration-arrow"></div>
                      </div>`);}else{$(this).parent().children('.warning').remove();}});/*Check our "sign in" form*/$('.sign-form').on('submit',function(event){$('.sign-inputs').each(function(){if(this.value==''){//if input is empty
event.preventDefault();let parent=$(this).closest('li');if(parent.hasClass('name-input')){/*Add warning massage for input "User name"*/parent.append(`<div class="sign-in-warning name-input-css"> 
                      <p>You don't enter any value</p>
                      <div class="arrow"></div>
                      </div>`);}else{/*Add warning massage for "password input"*/parent.append(`<div class="sign-in-warning"> 
                      <p>You don't enter any value</p>
                      <div class="arrow"></div>
                      </div>`);}}});});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiJCIsIm9uIiwiZXZlbnQiLCJlYWNoIiwidmFsIiwiYWRkQ2xhc3MiLCJwYXJlbnQiLCJjbG9zZXN0IiwicHJldmVudERlZmF1bHQiLCJhcHBlbmQiLCJyZW1vdmVDbGFzcyIsImNoaWxkcmVuIiwicmVtb3ZlIiwicHJvcCIsImdlbmRlclBhcmVudCIsInZhbHVlIiwiaGFzQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBQSxDQUFDLENBQUMsWUFBRCxDQUFELENBQWdCQyxFQUFoQixDQUFtQixRQUFuQixDQUE2QixTQUFVQyxLQUFWLENBQWlCLENBRTVDRixDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CRyxJQUFuQixDQUF3QixVQUFZLENBQ2xDLG9DQUNBLEdBQUlILENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUksR0FBUixJQUFpQixFQUFyQixDQUF5QixDQUN2QkosQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRSyxRQUFSLENBQWlCLElBQWpCLEVBQXNCO0FBQ3RCLEdBQUlDLENBQUFBLE1BQU0sQ0FBR04sQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRTyxPQUFSLENBQWdCLElBQWhCLENBQWIsQ0FDQUwsS0FBSyxDQUFDTSxjQUFOLEdBQ0EscUJBQ0FGLE1BQU0sQ0FBQ0csTUFBUCxDQUFlOzs7NkJBQWYsRUFJRCxDQVRELElBU08sQ0FDTFQsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRVSxXQUFSLENBQW9CLElBQXBCLEVBQXlCO0FBQ3pCVixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFPLE9BQVIsQ0FBZ0IsSUFBaEIsRUFBc0JJLFFBQXRCLENBQStCLFVBQS9CLEVBQTJDQyxNQUEzQyxHQUNELENBQ0YsQ0FmRCxFQWdCQSxHQUFJWixDQUFDLENBQUMsT0FBRCxDQUFELENBQVdhLElBQVgsQ0FBZ0IsU0FBaEIsR0FBOEIsSUFBOUIsRUFBc0NiLENBQUMsQ0FBQyxTQUFELENBQUQsQ0FBYWEsSUFBYixDQUFrQixTQUFsQixHQUFnQyxJQUExRSxDQUFnRixDQUM5RSxxQ0FDQSxHQUFJQyxDQUFBQSxZQUFZLENBQUdkLENBQUMsQ0FBQyxPQUFELENBQUQsQ0FBV00sTUFBWCxFQUFuQixDQUNBUSxZQUFZLENBQUNMLE1BQWIsQ0FBcUI7Ozs2QkFBckIsRUFJQVAsS0FBSyxDQUFDTSxjQUFOLEdBQ0QsQ0FDRixDQTNCRCxFQTZCQVIsQ0FBQyxDQUFDLG9CQUFELENBQUQsQ0FBd0JDLEVBQXhCLENBQTJCLE1BQTNCLENBQW1DLFVBQVksQ0FDN0MsMkNBQ0EsR0FBSUQsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRSSxHQUFSLElBQWlCSixDQUFDLENBQUMsZUFBRCxDQUFELENBQW1CSSxHQUFuQixFQUFyQixDQUErQyxDQUM3QyxHQUFJRSxDQUFBQSxNQUFNLENBQUdOLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUU0sTUFBUixFQUFiLENBQ0FBLE1BQU0sQ0FBQ0csTUFBUCxDQUFlOzs7NkJBQWYsRUFJRCxDQU5ELElBTU8sQ0FDTFQsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRTSxNQUFSLEdBQWlCSyxRQUFqQixDQUEwQixVQUExQixFQUFzQ0MsTUFBdEMsR0FDRCxDQUNGLENBWEQsRUFhQSw0QkFDQVosQ0FBQyxDQUFDLFlBQUQsQ0FBRCxDQUFnQkMsRUFBaEIsQ0FBbUIsUUFBbkIsQ0FBNkIsU0FBVUMsS0FBVixDQUFpQixDQUM1Q0YsQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQkcsSUFBbEIsQ0FBdUIsVUFBWSxDQUVqQyxHQUFLLElBQUQsQ0FBT1ksS0FBUCxFQUFnQixFQUFwQixDQUF3QixDQUFDO0FBQ3ZCYixLQUFLLENBQUNNLGNBQU4sR0FDQSxHQUFJRixDQUFBQSxNQUFNLENBQUdOLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUU8sT0FBUixDQUFnQixJQUFoQixDQUFiLENBQ0EsR0FBSUQsTUFBTSxDQUFDVSxRQUFQLENBQWdCLFlBQWhCLENBQUosQ0FBbUMsQ0FDakMsNkNBQ0FWLE1BQU0sQ0FBQ0csTUFBUCxDQUFlOzs7NkJBQWYsRUFJRCxDQU5ELElBTU8sQ0FDTCw0Q0FDQUgsTUFBTSxDQUFDRyxNQUFQLENBQWU7Ozs2QkFBZixFQUlELENBQ0YsQ0FDRixDQW5CRCxFQW9CRCxDQXJCRCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJCgnLnVzZXItZm9ybScpLm9uKCdzdWJtaXQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHJcbiAgJCgnLnN0cmluZy1pbnB1dCcpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgLypDaGVjayBvdXIgaW5wdXQgKGFyZSB0aGV5IGVtcHR5KSovXHJcbiAgICBpZiAoJCh0aGlzKS52YWwoKSA9PSAnJykge1xyXG4gICAgICAkKHRoaXMpLmFkZENsYXNzKCdiZycpLy9tYWtlIG91ciBpbnB1dCByZWRcclxuICAgICAgbGV0IHBhcmVudCA9ICQodGhpcykuY2xvc2VzdCgnbGknKVxyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgIC8qQWRkIHdhcm5pbmcgYmxvY2sqL1xyXG4gICAgICBwYXJlbnQuYXBwZW5kKGA8ZGl2IGNsYXNzPVwid2FybmluZ1wiPiBcclxuICAgICAgICAgICAgICAgICAgICAgIDxwPllvdSBlbnRlciB3cm9uZyB2YWx1ZTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZWdpc3RyYXRpb24tYXJyb3dcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PmApXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdiZycpLy9pZiBldmVyeXRoaW5nIG9rLGRlbGV0ZSByZWQgYmFja2dyb3VuZCBpbiBpbnB1dFxyXG4gICAgICAkKHRoaXMpLmNsb3Nlc3QoJ2xpJykuY2hpbGRyZW4oJy53YXJuaW5nJykucmVtb3ZlKClcclxuICAgIH1cclxuICB9KVxyXG4gIGlmICgkKCcjbWFsZScpLnByb3AoJ2NoZWNrZWQnKSA9PSB0cnVlICYmICQoJyNmZW1hbGUnKS5wcm9wKCdjaGVja2VkJykgPT0gdHJ1ZSkge1xyXG4gICAgLypDaGVjayBpZiB1c2VyIGNob29zZSB0d28gdmFyaWFudHMqL1xyXG4gICAgbGV0IGdlbmRlclBhcmVudCA9ICQoJyNtYWxlJykucGFyZW50KClcclxuICAgIGdlbmRlclBhcmVudC5hcHBlbmQoYDxkaXYgY2xhc3M9XCJnZW5kZXItd2FybmluZ1wiPiBcclxuICAgICAgICAgICAgICAgICAgICAgIDxwPllvdSBlbnRlciB3cm9uZyBnZW5kZXIgdmFsdWU8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmVnaXN0cmF0aW9uLWFycm93XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gKVxyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gIH1cclxufSlcclxuXHJcbiQoJyNVc2VycGFzc3dvcmRBZ2FpbicpLm9uKCdibHVyJywgZnVuY3Rpb24gKCkge1xyXG4gIC8qQ2hlY2sgaWYgb3VyIHBhc3N3b3JkcyBhcmUgbm90IHRoZSBzYW1lKi9cclxuICBpZiAoJCh0aGlzKS52YWwoKSAhPSAkKCcjVXNlcnBhc3N3b3JkJykudmFsKCkpIHtcclxuICAgIGxldCBwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpXHJcbiAgICBwYXJlbnQuYXBwZW5kKGA8ZGl2IGNsYXNzPVwid2FybmluZ1wiPiBcclxuICAgICAgICAgICAgICAgICAgICAgIDxwPlBhc3N3b3JkcyBhcmUgbm90IHRoZSBzYW1lPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJlZ2lzdHJhdGlvbi1hcnJvd1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YClcclxuICB9IGVsc2Uge1xyXG4gICAgJCh0aGlzKS5wYXJlbnQoKS5jaGlsZHJlbignLndhcm5pbmcnKS5yZW1vdmUoKVxyXG4gIH1cclxufSlcclxuXHJcbi8qQ2hlY2sgb3VyIFwic2lnbiBpblwiIGZvcm0qL1xyXG4kKCcuc2lnbi1mb3JtJykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICQoJy5zaWduLWlucHV0cycpLmVhY2goZnVuY3Rpb24gKCkge1xyXG5cclxuICAgIGlmICgodGhpcykudmFsdWUgPT0gJycpIHsvL2lmIGlucHV0IGlzIGVtcHR5XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgICAgbGV0IHBhcmVudCA9ICQodGhpcykuY2xvc2VzdCgnbGknKVxyXG4gICAgICBpZiAocGFyZW50Lmhhc0NsYXNzKCduYW1lLWlucHV0JykpIHtcclxuICAgICAgICAvKkFkZCB3YXJuaW5nIG1hc3NhZ2UgZm9yIGlucHV0IFwiVXNlciBuYW1lXCIqL1xyXG4gICAgICAgIHBhcmVudC5hcHBlbmQoYDxkaXYgY2xhc3M9XCJzaWduLWluLXdhcm5pbmcgbmFtZS1pbnB1dC1jc3NcIj4gXHJcbiAgICAgICAgICAgICAgICAgICAgICA8cD5Zb3UgZG9uJ3QgZW50ZXIgYW55IHZhbHVlPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8qQWRkIHdhcm5pbmcgbWFzc2FnZSBmb3IgXCJwYXNzd29yZCBpbnB1dFwiKi9cclxuICAgICAgICBwYXJlbnQuYXBwZW5kKGA8ZGl2IGNsYXNzPVwic2lnbi1pbi13YXJuaW5nXCI+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgPHA+WW91IGRvbid0IGVudGVyIGFueSB2YWx1ZTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+YClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pXHJcbn0pXHJcblxyXG4iXX0=
